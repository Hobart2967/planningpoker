@using System.Globalization
@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller

<div class="pokerDeskPanel">

    <div class="team-title">
        <h2>
            <span class="badge bg-secondary">
                <span class="oi oi-people" title="@UIResources.PlanningPokerDesk_TeamTooltip" aria-hidden="true"></span>
            </span>
            <span>@Controller.TeamName</span>
        </h2>
        <h3>
            <span class="badge bg-secondary">
                <span class="oi oi-person" title="@UIResources.PlanningPokerDesk_UserTooltip" aria-hidden="true"></span>
            </span>
            <span>@Controller.User?.Name</span>
        </h3>
    </div>

    @if (Controller.IsScrumMaster || Controller.CanShowEstimationSummary || Controller.CanStartTimer || Controller.CanStopTimer)
    {
        <div class="actionsBar container">
            <p class="row justify-content-md-start gy-3">
                @if (Controller.CanStartEstimation)
                {
                    <button type="button" @onclick="StartEstimationCommand" class="btn btn-primary col-md-auto me-3">
                        <span class="oi oi-media-play me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_StartEstimationButton
                    </button>
                }

                @if (Controller.CanCancelEstimation)
                {
                    <button type="button" @onclick="CancelEstimationCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-media-stop me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_CancelEstimationButton
                    </button>
                }

                @if (Controller.CanShowEstimationSummary)
                {
                    <button type="button" @onclick="ShowEstimationSummaryCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-calculator me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_ShowAverageButton
                    </button>
                }

                @if (Controller.CanStartTimer)
                {
                    <button type="button" @onclick="StartTimerCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-timer me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_StartTimerButton
                    </button>
                }

                @if (Controller.CanStopTimer)
                {
                    <button type="button" @onclick="CancelTimerCommand" class="btn btn-secondary col-md-auto me-3">
                        <span class="oi oi-action-undo me-1" aria-hidden="true"></span>
                        @UIResources.PlanningPokerDesk_StopTimerButton
                    </button>
                }
            </p>
        </div>
    }

    @if (Controller.CanSelectEstimation)
    {
        <div class="availableEstimations">
            <h3>@UIResources.PlanningPokerDesk_PickEstimationLabel</h3>
            <ul>
                @foreach (var estimation in Controller.AvailableEstimations)
                {
                    <li><a @onclick="@(e => SelectEstimationCommand(estimation))">@GetEstimationText(estimation)</a></li>
                }
            </ul>
        </div>
    }

    @if (Controller.CanSelectEstimation && HasEstimationResult)
    {
        <hr class="border border-primary border-2 opacity-75">
    }

    @if (HasEstimationResult)
    {
        <div class="estimationResult">
            <h3>@UIResources.PlanningPokerDesk_SelectedEstimatesLabel</h3>

            @if (Controller.EstimationSummary != null)
            {
                <div class="estimationSummary row">
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">@UIResources.PlanningPokerDesk_AverageLabel</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Average)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">@UIResources.PlanningPokerDesk_MedianLabel</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Median)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">@UIResources.PlanningPokerDesk_SumLabel</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Sum)
                            </div>
                        </div>
                    </div>
                </div>
            }

            <ul>
                @foreach (var memberEstimation in Controller.Estimations!)
                {
                    <li>
                        <span class="estimationItemValue">@(memberEstimation.HasEstimation ? GetEstimationText(memberEstimation.Estimation) : null)</span>
                        <span class="estimationItemName">@memberEstimation.MemberName</span>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code
{
    private bool HasEstimationResult => Controller.Estimations != null;

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private Task SelectEstimationCommand(double? estimation)
    {
        return TryRun(() => Controller.SelectEstimation(estimation));
    }

    private Task StartEstimationCommand()
    {
        return TryRun(() => Controller.StartEstimation());
    }

    private Task CancelEstimationCommand()
    {
        return TryRun(() => Controller.CancelEstimation());
    }

    private void ShowEstimationSummaryCommand()
    {
        Controller.ShowEstimationSummary();
    }

    private Task StartTimerCommand()
    {
        return TryRun(() => Controller.StartTimer());
    }

    private Task CancelTimerCommand()
    {
        return TryRun(() => Controller.CancelTimer());
    }

    private void ControllerOnPropertyChanged(object? sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private static string GetEstimationText(double? estimation)
    {
        if (estimation == null)
        {
            return Resources.Estimation_QuestionMark;
        }

        var value = estimation.Value;
        if (double.IsPositiveInfinity(value))
        {
            return Resources.Estimation_Infinity;
        }
        else if (value == 0.5)
        {
            return Resources.Estimation_Half;
        }
        else if (value == -999509.0)
        {
            return Resources.Estimation_XS;
        }
        else if (value == -999508.0)
        {
            return Resources.Estimation_S;
        }
        else if (value == -999507.0)
        {
            return Resources.Estimation_M;
        }
        else if (value == -999506.0)
        {
            return Resources.Estimation_L;
        }
        else if (value == -999505.0)
        {
            return Resources.Estimation_XL;
        }
        else if (value == -999909.0)
        {
            return Resources.Estimation_Rock;
        }
        else if (value == -999908.0)
        {
            return Resources.Estimation_Paper;
        }
        else if (value == -999907.0)
        {
            return Resources.Estimation_Scissors;
        }
        else if (value == -999906.0)
        {
            return Resources.Estimation_Lizard;
        }
        else if (value == -999905.0)
        {
            return Resources.Estimation_Spock;
        }
        else
        {
            return value.ToString();
        }
    }

    private static string FormatSummaryValue(double? value)
    {
        if (!value.HasValue)
        {
            return string.Empty;
        }

        return value.Value.ToString("N2");
    }
}
