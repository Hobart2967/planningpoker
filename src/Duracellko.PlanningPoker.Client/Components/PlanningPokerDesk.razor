@inherits ViewComponentBase
@implements IDisposable
@inject PlanningPokerController Controller

<div class="pokerDeskPanel">
    <div class="team-title">
        <h2>
            <span class="badge badge-secondary"><span class="oi oi-people" title="Team" aria-hidden="true"></span></span>
            <span>@Controller.TeamName</span>
        </h2>
        <h3>
            <span class="badge badge-secondary"><span class="oi oi-person" title="User" aria-hidden="true"></span></span>
            <span>@Controller.User?.Name</span>
        </h3>
    </div>

    @if (Controller.CanSelectEstimation)
    {
        <div class="availableEstimations">
            <h3>Pick estimation</h3>
            <ul>
                @foreach (var estimation in Controller.AvailableEstimations)
                {
                    <li><a @onclick="@(e => SelectEstimationCommand(estimation))">@GetEstimationText(estimation)</a></li>
                }
            </ul>
        </div>
    }

    @if (Controller.IsScrumMaster || Controller.CanShowEstimationSummary)
    {
        <div class="actionsBar">
            <p>
                @if (Controller.CanStartEstimation)
                {
                    <button type="button" @onclick="StartEstimationCommand" class="btn btn-primary mr-3">
                        <span class="oi oi-media-play mr-1" aria-hidden="true"></span> Start estimation
                    </button>
                }

                @if (Controller.CanCancelEstimation)
                {
                    <button type="button" @onclick="CancelEstimationCommand" class="btn btn-secondary mr-3">
                        <span class="oi oi-media-stop mr-1" aria-hidden="true"></span> Cancel estimation
                    </button>
                }

                @if (Controller.CanShowEstimationSummary)
                {
                    <button type="button" @onclick="ShowEstimationSummaryCommand" class="btn btn-secondary mr-3">
                        <span class="oi oi-calculator mr-1" aria-hidden="true"></span> Show average
                    </button>
                }
            </p>
        </div>
    }

    @if (HasEstimationResult)
    {
        <div class="estimationResult">
            <h3>Selected estimates</h3>

            @if (Controller.EstimationSummary != null)
            {
                <div class="estimationSummary row">
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">Average</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Average)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">Median</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Median)
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="estimationSummaryItem">
                            <div class="estimationSummaryTitle">Sum</div>
                            <div class="estimationSummaryValue">
                                @FormatSummaryValue(Controller.EstimationSummary.Sum)
                            </div>
                        </div>
                    </div>
                </div>
            }

            <ul>
                @foreach (var memberEstimation in Controller.Estimations)
                {
                    <li>
                        <span class="estimationItemValue">@(memberEstimation.HasEstimation ? GetEstimationText(memberEstimation.Estimation) : null)</span>
                        <span class="estimationItemName">@memberEstimation.MemberName</span>
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code
{
    private bool HasEstimationResult => Controller.Estimations != null;

    public void Dispose()
    {
        Controller.PropertyChanged -= ControllerOnPropertyChanged;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Controller.PropertyChanged += ControllerOnPropertyChanged;
    }

    private Task SelectEstimationCommand(double? estimation)
    {
        return TryRun(() => Controller.SelectEstimation(estimation));
    }

    private Task StartEstimationCommand()
    {
        return TryRun(() => Controller.StartEstimation());
    }

    private Task CancelEstimationCommand()
    {
        return TryRun(() => Controller.CancelEstimation());
    }

    private void ShowEstimationSummaryCommand()
    {
        Controller.ShowEstimationSummary();
    }

    private void ControllerOnPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private static string GetEstimationText(double? estimation)
    {
        if (estimation == null)
        {
            return "?";
        }

        var value = estimation.Value;
        if (double.IsPositiveInfinity(value))
        {
            return "\u221E";
        }
        else if (value == 0.5)
        {
            return "\u00BD";
        }
        else if (value == -999509.0)
        {
            return "XS";
        }
        else if (value == -999508.0)
        {
            return "S";
        }
        else if (value == -999507.0)
        {
            return "M";
        }
        else if (value == -999506.0)
        {
            return "L";
        }
        else if (value == -999505.0)
        {
            return "XL";
        }
        else if (value == -999909.0)
        {
            // 💎 Rock
            return "\uD83D\uDC8E";
        }
        else if (value == -999908.0)
        {
            // 📜 Paper
            return "\uD83D\uDCDC";
        }
        else if (value == -999907.0)
        {
            // ✂ Scissors
            return "\u2702";
        }
        else if (value == -999906.0)
        {
            // 🦎 Lizard
            return "\uD83E\uDD8E";
        }
        else if (value == -999905.0)
        {
            // 🖖 Spock
            return "\uD83D\uDD96";
        }
        else
        {
            return value.ToString();
        }
    }

    private static string FormatSummaryValue(double? value)
    {
        if (!value.HasValue)
        {
            return string.Empty;
        }

        return value.Value.ToString("N2");
    }
}
